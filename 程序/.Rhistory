sum(data)
data
mode(data)
as.matrix(data)
data<- as.matrix(data)
mean(data)
sum(data)
std(data)
sd(data)
mean(((data-mean(data))/sd(data))^3)# 偏度
mean(((data-mean(data))/sd(data))^3)# 偏度
mean(((data-mean(data))/sd(data))^4)-3 # 峰度
mean(((data-mean(data))/sd(data))^4)-3 # 峰度
mean(((data-mean(data))/sd(data))^4) # 峰度
skewness(data)
# 选择一款股票：招商银行
library(fBasics)
skewness(data)
mean(((data-mean(data))/sd(data))^3)# 偏度
kurtosis(data)
mean(((data-mean(data))/sd(data))^4) # 峰度
mean(((data-mean(data))/sd(data))^4)-3 # 峰度
kurtosis(data)
# 均值
mean(data)
################# 2.选择一只股票并估计出单因子模型的α与β值；
r=diff(log(as.matrix(sz180[,c(2:174)])))
################# 2.选择一只股票并估计出单因子模型的α与β值；
r=diff(log(data))
rm=diff(log(sz180index$`收盘价(元)`))
onefactor<-function(r,rm){
m=lm(r~rm)
s=m$residuals
coe=m$coefficients
sds=sd(s)
n=length(r)
rs=matrix(data=0,nrow = n,ncol = 1)
for (i in 1:n){
rs[i]=coe[1]+coe[2]*rm[i]+rnorm(1,mean=0,sd=sds)
}
#这段代码也可以写为矩阵的形式
output=list(coe=coe,sds=sds,rs=rs)
return(output)
}
coe
#选择第一个与第二个股票生成模拟序列，然后计算相关系数并与原始相关系数对比
r1=onefactor(r[,1],rm)$rs
r2=onefactor(r[,2],rm)$rs
c(cor(r1,r2),cor(r[,1],r[,2]))
r1<-onefactor(r,rm)
r1
View(r1)
r1[["coe"]]
library(fBasics)
data = sz180[,"招商银行"]
data<- as.matrix(data)
# 均值
mean(data)
# 标准差
sd(data)
# 偏度
# mean(((data-mean(data))/sd(data))^3)
skewness(data)
# 峰度
# mean(((data-mean(data))/sd(data))^4)-3
kurtosis(data)
library(fGarch)
#模拟AR(1)-GARCH(1,1)
spec = garchSpec(model = list(ar = 0.5, alpha = c(0.3), beta = c(0.6)))
te=garchSim(spec, n = 1000)
plot(te)
a=acf(te)
a
View(r1)
################# 3.选择一只股票，估计出合适的GARCH模型；
c<-garchFit(~arma(1,1)+garch(1,1),data=r,trace = F, cond.dist = "norm", include.mean = FALSE)
summary(c)
################# 3.选择一只股票，估计出合适的GARCH模型；
c<-garchFit(~arma(1,1)+garch(1,1),data=data,trace = F, cond.dist = "norm", include.mean = FALSE)
summary(c)
c3<-garchFit(~arma(1,0)+garch(1,1),data=s,trace = F, cond.dist = "norm", include.mean = FALSE)
c3<-garchFit(~arma(1,0)+garch(1,1),data=data,trace = F, cond.dist = "norm", include.mean = FALSE)
summary(c)
################# 2.选择一只股票并估计出单因子模型的α与β值；
r=diff(log(data))
rm=diff(log(sz180index$`收盘价(元)`))
onefactor<-function(r,rm){
m=lm(r~rm)
s=m$residuals
coe=m$coefficients
sds=sd(s)
n=length(r)
rs=matrix(data=0,nrow = n,ncol = 1)
for (i in 1:n){
rs[i]=coe[1]+coe[2]*rm[i]+rnorm(1,mean=0,sd=sds)
}
#这段代码也可以写为矩阵的形式
output=list(coe=coe,sds=sds,rs=rs)
return(output)
}
r1<-onefactor(r,rm)
View(r1)
r1
r1$coe
library(fGarch)
s = garchSpec(model = list(ar = 0.5, alpha = c(0.3,0.1), beta = 0.3))
te=garchSim(s, n = 2000)
te1=te@.Data
################# 3.选择一只股票，估计出合适的GARCH模型；
c<-garchFit(~arma(1,1)+garch(1,1),data=data,trace = F, cond.dist = "norm", include.mean = FALSE)
c3<-garchFit(~arma(1,0)+garch(1,1),data=data,trace = F, cond.dist = "norm", include.mean = FALSE)
################# 3.选择一只股票，估计出合适的GARCH模型；
c<-garchFit(~garch(1,1),data=data,trace = F, cond.dist = "norm", include.mean = FALSE)
c
################# 3.选择一只股票，估计出合适的GARCH模型；
c<-garchFit(~garch(1,2),data=data,trace = F, cond.dist = "norm", include.mean = FALSE)
c
c3<-garchFit(~arma(1,0)+garch(1,1),data=data,trace = F, cond.dist = "norm", include.mean = FALSE)
c3
c3<-garchFit(~arma(1,0)+garch(1,1),data=data,trace = F, cond.dist = "norm", include.mean = FALSE)
c3<-garchFit(~arma(1,0)+garch(2,1),data=data,trace = F, cond.dist = "norm", include.mean = FALSE)
c
c3<-garchFit(~arma(1,0)+garch(1,1),data=data,trace = F, cond.dist = "norm", include.mean = FALSE)
c3<-garchFit(~garch(1,1),data=data,trace = F, cond.dist = "norm", include.mean = FALSE)
summary(c3)
data = sz180[,"上海机场"]
data<- as.matrix(data)
c3<-garchFit(~garch(1,1),data=data,trace = F, cond.dist = "norm", include.mean = FALSE)
c3
summary(c3)
data = diff(log(sz180[,"上海机场"]))
data<- as.matrix(data)
c3<-garchFit(~garch(1,1),data=data,trace = F, cond.dist = "norm", include.mean = FALSE)
c3
summary(c3)
data
data = diff(log(sz180[,2]))
c3<-garchFit(~garch(1,1),data=data,trace = F, cond.dist = "norm", include.mean = FALSE)
data
data = diff(log(sz180[,2]))
data
data = sz180[,2])
source("D:/All/11-浙江工商大学/大三（上）/金融统计分析/code04/code04.r", echo=TRUE)
data = sz180[,2]
data
data = diff(log(sz180[,2]))
data
plot(data)
plot(data)
data = diff(log(sz180$上海机场))
plot(data)
c3<-garchFit(~garch(1,1),data=data,trace = F, cond.dist = "norm", include.mean = FALSE)
c3
summary(c3)
################# 4.选择5只股票，计算出相关系数矩阵；
# 计算4中股票的投资组合的有效前沿（不可做空），选择其中的5个组合并报告出来，绘制出有效前沿。
data = diff(log(sz180[,2:6]))
################# 4.选择5只股票，计算出相关系数矩阵；
# 计算4中股票的投资组合的有效前沿（不可做空），选择其中的5个组合并报告出来，绘制出有效前沿。
data = diff(log(as.matrix(sz180[,2:6])))
data
cor(data)
################# 5.计算4中股票的投资组合的有效前沿（不可做空），选择其中的5个组合并报告出来，绘制出有效前沿。
library(fPortfolio)
################# 5.计算4中股票的投资组合的有效前沿（不可做空），选择其中的5个组合并报告出来，绘制出有效前沿。
rs=diff(log(as.matrix(sz180[,c(2:6)])))
rs
#将Excel导入的数据转换为timeseries格式
library(timeSeries)
rs1<-as.timeSeries(rs)
library(fPortfolio)
rlong<-portfolioSpec( )
setNFrontierPoints(rlong)<-10
#设置20个点
longFrontier<-portfolioFrontier(rs1,spec=rlong)
print(longFrontier)
#提取投资组合的权重
pw<-longFrontier@portfolio@portfolio$weights
#提取风险
pcov<-longFrontier@portfolio@portfolio$targetRisk
#提取期望收益
pret<-longFrontier@portfolio@portfolio$targetReturn
rlong<-portfolioSpec( )
setNFrontierPoints(rlong)<-100
#设置100个点
longFrontier<-portfolioFrontier(rs1,spec=rlong)
print(longFrontier)
plot(longFrontier)
rs=r[,c(4,18,100,170,57)]
################# 5.计算4中股票的投资组合的有效前沿（不可做空），选择其中的5个组合并报告出来，绘制出有效前沿。
r=diff(log(as.matrix(sz180[,c(2:174)])))
rs=r[,c(4,18,100,170,57)]
rs1<-as.timeSeries(rs)
rs1<-as.timeSeries(rs)
rlong<-portfolioSpec( )
setNFrontierPoints(rlong)<-10
#设置20个点
longFrontier<-portfolioFrontier(rs1,spec=rlong)
print(longFrontier)
#提取投资组合的权重
pw<-longFrontier@portfolio@portfolio$weights
#提取风险
pcov<-longFrontier@portfolio@portfolio$targetRisk
#提取期望收益
pret<-longFrontier@portfolio@portfolio$targetReturn
rlong<-portfolioSpec( )
setNFrontierPoints(rlong)<-100
#设置100个点
longFrontier<-portfolioFrontier(rs1,spec=rlong)
print(longFrontier)
plot(longFrontier)
sz180.columns
sz180.colnames
colnames(sz180)
colnames(sz180)[4]
colnames(sz180)[c(5,19,101,171,58)]
cor(rs)
rindex<-diff(log(as.matrix(sz180index[,2])))
library(tseries)
jarque.bera.test(sz180index$`收盘价(元)`)
jarque.bera.test(rindex)
library(fBasics)
c(mean(rindex),sd(rindex),skewness(rindex),kurtosis(rindex))
#有不同的包可以实施相同的检验
jarqueberaTest(rindex)
#ADF检验：注意原假设是什么，以及如何判断是否拒绝原假设
adf.test(rindex,alternative = "stationary")
adf.test(sz180index$`收盘价(元)`,alternative = "stationary")
#ADF检验：注意原假设是什么，以及如何判断是否拒绝原假设
adf.test(rindex,alternative = "stationary")
adf.test(sz180index$`收盘价(元)`,alternative = "stationary")
#二、ARIMA模型
#acf与pacf，一般而言，日收益率数据的自相关系数不显著
acf(rindex)
pacf(rindex)
#注意：需要知道如何判断参数是否显著
m1<-arima(rindex,order=c(2,0,2))
summary(m1)
library(forecast)
m2<- auto.arima(rindex)
m2
#预测均使用predict函数，注意list里面包括了两个部分
pre=predict(m2,10)
#残差的Ljung-box检验
Box.test(residuals(m1),lag=14,type="Ljung-Box",fitdf = 0)
#二、ARIMA模型
#acf与pacf，一般而言，日收益率数据的自相关系数不显著
acf(rindex)
#ADF检验：注意原假设是什么，以及如何判断是否拒绝原假设
adf.test(rindex,alternative = "stationary")
pacf(rindex)
#预测均使用predict函数，注意list里面包括了两个部分
pre=predict(m2,10)
#残差的Ljung-box检验
Box.test(residuals(m1),lag=14,type="Ljung-Box",fitdf = 0)
library(fGarch)
m3<-garchFit(~arma(1,1)+garch(1,1),data=rindex,trace = F, cond.dist = "norm", include.mean = FALSE)
summary(m3)
#预测
predict(m3,n.ahead=10,mse="cond",plot=TRUE,crit_val=2)
#选择几只股票进行测试
rtest=diff(log(as.matrix(sz180[,c(10:15)])))
cor(rtest)
#不可做空（重点）
library(timeSeries)
rtest01<-as.timeSeries(rtest)
library(fPortfolio)
rlong<-portfolioSpec( )
setNFrontierPoints(rlong)<-10
#设置20个点
longFrontier<-portfolioFrontier(rtest01,spec=rlong)
print(longFrontier)
#五、单因子模型
#会使用lm函数估计单因子模型，并对模型进行简单的分析
#从模型估计结果里指出α与β值并进行简单的分析
r1=rtest[,1]
m4=lm(r1~rindex)
summary(m4)
#二、ARIMA模型
#acf与pacf，一般而言，日收益率数据的自相关系数不显著
acf(rindex)
rindex<-diff(log(as.matrix(sz180index[,2])))
sz180index[,2]
library(tseries)
jarque.bera.test(sz180index$`收盘价(元)`)
jarque.bera.test(rindex)
library(fBasics)
c(mean(rindex),sd(rindex),skewness(rindex),kurtosis(rindex))
#有不同的包可以实施相同的检验
jarqueberaTest(rindex)
jarque.bera.test(rindex)
#ADF检验：注意原假设是什么，以及如何判断是否拒绝原假设
adf.test(rindex,alternative = "stationary")
adf.test(sz180index$`收盘价(元)`,alternative = "stationary")
#二、ARIMA模型
#acf与pacf，一般而言，日收益率数据的自相关系数不显著
acf(rindex)
pacf(rindex)
#注意：需要知道如何判断参数是否显著
m1<-arima(rindex,order=c(2,0,2))
summary(m1)
library(forecast)
#有不同的包可以实施相同的检验
jarqueberaTest(rindex)
#ADF检验：注意原假设是什么，以及如何判断是否拒绝原假设
adf.test(rindex,alternative = "stationary")
adf.test(sz180index$`收盘价(元)`,alternative = "stationary")
m2<- auto.arima(rindex)
m2
#二、ARIMA模型
#acf与pacf，一般而言，日收益率数据的自相关系数不显著
acf(rindex)
pacf(rindex)
#二、ARIMA模型
#acf与pacf，一般而言，日收益率数据的自相关系数不显著
acf(rindex)
pacf(rindex)
#二、ARIMA模型
#acf与pacf，一般而言，日收益率数据的自相关系数不显著
acf(rindex)
pacf(rindex)
#二、ARIMA模型
#acf与pacf，一般而言，日收益率数据的自相关系数不显著
acf(rindex)
pacf(rindex)
#注意：需要知道如何判断参数是否显著
m1<-arima(rindex,order=c(2,0,2))
summary(m1)
#预测均使用predict函数，注意list里面包括了两个部分
pre=predict(m2,10)
?padf
?pacf
#注意：需要知道如何判断参数是否显著
m1<-arima(rindex,order=c(2,0,2))
summary(m1)
library(forecast)
m2<- auto.arima(rindex)
m2
#残差的Ljung-box检验
Box.test(residuals(m1),lag=14,type="Ljung-Box",fitdf = 0)
#残差的Ljung-box检验
Box.test(residuals(m1),lag=14,type="Ljung-Box",fitdf = 0)
#预测
predict(m3,n.ahead=10,mse="cond",plot=TRUE,crit_val=2)
m3<-garchFit(~arma(1,1)+garch(1,1),data=rindex,trace = F, cond.dist = "norm", include.mean = FALSE)
summary(m3)
#预测均使用predict函数，注意list里面包括了两个部分
pre=predict(m2,10)
#残差的Ljung-box检验
Box.test(residuals(m1),lag=14,type="Ljung-Box",fitdf = 0)
setNFrontierPoints(rlong)<-20
#设置20个点
longFrontier<-portfolioFrontier(rtest01,spec=rlong)
print(longFrontier)
#五、单因子模型
#会使用lm函数估计单因子模型，并对模型进行简单的分析
#从模型估计结果里指出α与β值并进行简单的分析
r1=rtest[,1]
r1
rtest
#选择几只股票进行测试
rtest=diff(log(as.matrix(sz180[,c(10:15)])))
cor(rtest)
#不可做空（重点）
library(timeSeries)
rtest01<-as.timeSeries(rtest)
library(fPortfolio)
rlong<-portfolioSpec( )
setNFrontierPoints(rlong)<-20
#设置20个点
longFrontier<-portfolioFrontier(rtest01,spec=rlong)
print(longFrontier)
rlong<-portfolioSpec( )
setNFrontierPoints(rlong)<-20
source("D:/All/11-浙江工商大学/大三（上）/金融统计分析/code04/code04.r", echo=TRUE)
#设置20个点
longFrontier<-portfolioFrontier(rtest01,spec=rlong)
print(longFrontier)
source("D:/All/11-浙江工商大学/大三（上）/金融统计分析/code04/code04.r", echo=TRUE)
print(longFrontier)
plot(longFrontier)
rtest
summary(m4)
m3<-garchFit(~arma(1,1)+garch(1,1),data=rindex,trace = F, cond.dist = "norm", include.mean = FALSE)
summary(m3)
m3<-garchFit(~arma(1,1)+garch(1,1),data=rindex,trace = F, cond.dist = "norm", include.mean = FALSE)
summary(m3)
setwd('./')
getwd()
setwd('D:\All\11-浙江工商大学\大三（上）\时间序列')
getwd()
setwd('D:/All/11-浙江工商大学/大三（上）/时间序列')
getwd()
data=read.table('./data/gdpr.txt',header=TRUE,encoding="utf-8")
gdpr=data[,2]
GDPR<-ts(gdpr,start=1978,frequency=1)
# ts函数将数据类型转换为时间序列形式，frequency=1表名数据的频率是年度数据
plot(GDPR)
rm(list=ls())
setwd('D:/All/11-浙江工商大学/大三（上）/时间序列')
getwd()
data=read.table('./data/gdpr.txt',header=TRUE,encoding="utf-8")
gdpr=data[,2]
GDPR<-ts(gdpr,start=1978,frequency=1)
# ts函数将数据类型转换为时间序列形式，frequency=1表名数据的频率是年度数据
plot(GDPR)
acf(GDPR)
pacf(GDPR)
EQ_GDPR<-arima(GDPR,order=c(5,0,0))
EQ_GDPR
View(GDPR)
EQ_GDPR01<-arima(GDPR,order=c(5,0,0))
EQ_GDPR01
EQ_GDPR01<-arima(GDPR,order=c(5,0,2))
EQ_GDPR01
EQ_GDPR01$coef
EQ_GDPR01$sigma2
EQ_GDPR01$var.coef
EQ_GDPR01$coef
EQ_GDPR01$sigma2
EQ_GDPR01$var.coef
EQ_GDPR01$residuals
EQ_GDPR01$var.coef
EQ_GDPR01$coef
EQ_GDPR01<-arima(GDPR,order=c(5,0,2))
EQ_GDPR01
summary(EQ_GDPR01)
diag(EQ_GDPR01$var.coef)
sqrt(diag(EQ_GDPR01$var.coef))
se<-sqrt(diag(EQ_GDPR01$var.coef))
EQ_GDPR01
a<-EQ_GDPR01$coef
se<-sqrt(diag(EQ_GDPR01$var.coef))
a/se
b<-a/se
b
EQ_GDPR02<-arima(GDPR,order=c(5,0,2),include.mean = T,
fixed=c(NA,NA,0,0,NA,NA,NA,NA),transform.pars = F)
EQ_GDPR02
a<-EQ_GDPR02$coef
se<-sqrt(diag(EQ_GDPR02$var.coef))
b<-a/se
b
EQ_GDPR02<-arima(GDPR,order=c(5,0,2),include.mean = F,
fixed=c(NA,NA,0,0,NA,NA,NA,NA),transform.pars = F)
EQ_GDPR02
EQ_GDPR02<-arima(GDPR,order=c(5,0,2),include.mean = F,
fixed=c(NA,NA,0,0,NA,NA,NA,NA),transform.pars = T)
EQ_GDPR02
EQ_GDPR02<-arima(GDPR,order=c(5,0,2),include.mean = T,
fixed=c(NA,NA,0,0,NA,NA,NA,NA),transform.pars = F)
EQ_GDPR02
EQ_GDPR03<-arima(GDPR,order=c(5,0,2),include.mean = T,
fixed=c(NA,NA,0,0,NA,0,NA,NA),transform.pars = F)
EQ_GDPR03
EQ_GDPR02<-arima(GDPR,order=c(5,0,2),include.mean = T,
fixed=c(NA,NA,0,0,NA,NA,NA,NA),transform.pars = F)
EQ_GDPR02
a<-EQ_GDPR02$coef
se<-sqrt(diag(EQ_GDPR02$var.coef))
b<-a/se
b
se
EQ_GDPR02<-arima(GDPR,order=c(5,0,2),include.mean = T,
fixed=c(NA,NA,0,0,NA,NA,NA,NA),transform.pars = F)
EQ_GDPR02
a<-EQ_GDPR02$coef
se<-sqrt(diag(EQ_GDPR02$var.coef))
se
a
a[1:2]
a[1:2],
a[5:]
a[1:2],
a[5:-1]
a[1:2],
a[5:6]
a[1:2],
a[5:length(a)]
c(a[1:2],a[5:length(a)])
a <-c(a[1:2],a[5:length(a)])
a
se
b <-a/se
b
a
EQ_GDPR03<-arima(GDPR,order=c(5,0,2),include.mean = T,
fixed=c(NA,NA,0,0,NA,0,NA,NA),transform.pars = F)
EQ_GDPR03
a<-EQ_GDPR03$coef
a
a<-c(a[1:2],a[5],a[7:8])
a
a
se<-sqrt(diag(EQ_GDPR03$var.coef))
b<-a/se
b
library(FindAllRoots)
install.packages('FindAllRoots')
library(FindAllRoots)
allroots(0.7432,0.2568)
?allroots
allroots(c(0.7432,0.2568)
allroots(c(0.7432,0.2568))
allroots(c(0.7432,0.2568),c(1,1))
allroots(c(0.7432,0.2568),c(0,1))
allroots(c(0.7432,0.2568),c(2,1))
allroots(c(0.7432,0.2568),c(2,1,0))
allroots(c(0.7432,0.2568),c(2))
allroots(c(0.7432,0.2568),c(2,0))
allroots(c(0.7432,0.2568),c(2,1,0))
allroots(c(0.7432,0.2568,0),c(2,1,0))
